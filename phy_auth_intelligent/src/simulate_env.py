"""
Simulates PHY layer attributes (CFO, CIR, RSSI) under varying conditions.
"""

import numpy as np

def simulate_cfo(n_samples, mean=0, std=2.35e-7 * 2.5e9):
    """
    Generate samples of Carrier Frequency Offset (CFO) as normally distributed random variables.
    
    Parameters:
        n_samples (int): Number of CFO samples to generate.
        mean (float, optional): Mean value of the normal distribution. Defaults to 0.
        std (float, optional): Standard deviation of the normal distribution. Defaults to 2.35e-7 * 2.5e9.
    
    Returns:
        np.ndarray: Array of generated CFO samples.
    """
    return np.random.normal(loc=mean, scale=std, size=n_samples)

def simulate_cir(n_samples, taps=12):
    """
    Simulate Channel Impulse Response (CIR) samples as real-valued sums of complex channel taps.
    
    Each CIR sample is generated by summing a specified number of complex taps, where tap amplitudes follow a Rayleigh distribution and tap phases are uniformly distributed over [0, 2Ï€). The function returns the real part of the summed complex CIR values.
    
    Parameters:
        n_samples (int): Number of CIR samples to generate.
        taps (int, optional): Number of channel taps per sample. Defaults to 12.
    
    Returns:
        np.ndarray: Array of real-valued CIR samples of shape (n_samples,).
    """
    amp = np.random.rayleigh(scale=1.0, size=(n_samples, taps))
    phase = np.random.uniform(0, 2 * np.pi, size=(n_samples, taps))
    cir = np.sum(amp * np.exp(1j * phase), axis=1)
    return np.real(cir)

def simulate_rssi(n_samples, d_range=(1, 100)):
    """
    Simulate Received Signal Strength Indicator (RSSI) values using a logarithmic path loss model.
    
    Parameters:
        n_samples (int): Number of RSSI samples to generate.
        d_range (tuple, optional): Range of distances (in meters) from which to uniformly sample, as (min, max). Defaults to (1, 100).
    
    Returns:
        np.ndarray: Array of simulated RSSI values.
    """
    d = np.random.uniform(*d_range, size=n_samples)
    rssi = -36.1 * np.log10(d / 10) - 75
    return rssi
